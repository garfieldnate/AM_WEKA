plugins {
	id 'java'
	id "com.adarshr.test-logger" version "2.1.1"
}

version = getVersionFromDescriptionProps()

sourceCompatibility = 1.11
targetCompatibility = 1.11

repositories {
  mavenCentral()
}

dependencies {
	implementation 'nz.ac.waikato.cms.weka:weka-dev:3.9.5'
	implementation group: 'com.google.guava', name: 'guava', version: '19.0'

	testImplementation group: 'junit', name: 'junit', version: '4.13.2'
	testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

	testImplementation group: 'nz.ac.waikato.cms.weka', name: 'weka-dev', classifier: 'tests', version: '3.9.5'
	testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.8.0'
	// Required to silence warnings for now; see https://github.com/mockito/mockito/issues/1325
	testImplementation group: 'org.mockito', name: 'mockito-inline', version: '3.8.0'

}

tasks.withType(Test).configureEach {
	maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

testlogger {
	theme 'mocha-parallel'
	// Show stout/stderr for failed tests
	showStandardStreams true
	showPassedStandardStreams false
	showSkippedStandardStreams false
	showFailedStandardStreams true
}

// JavaDoc with MathJax and core Weka docs linked
task javadoc(type: Javadoc, overwrite:true) {
  source = sourceSets.main.allJava
  classpath = project.sourceSets.main.compileClasspath

  options.addBooleanOption("-allow-script-in-comments",true)
  // DO NOT use single quotes (') in the strings below, or you will get
  // weird errors like "Illegal package name" when you run the JavaDoc task
  options.header = "<script type=\"text/x-mathjax-config\">" +
  "  MathJax.Hub.Config({" +
  "     \"HTML-CSS\": {" +
  "       styles: {" +
  "         \".MathJax_Display\": {" +
  "            \"display\": \"inline\"," +
  "            \"text-align\": \"left\"" +
  "         }" +
  "       }" +
  "     }" +
  "  });" +
  "</script>" +
  "<script type=\"text/javascript\" src=\"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS_HTML\"></script>"
  options.links("http://weka.sourceforge.net/doc.dev/")
}

task dist(type:Zip){
    from jar.outputs.files
    from (javadoc.outputs.files) {
        into 'doc'
    }
    from (projectDir) {
    include ([
        'src/**/*',
        'data/**/*',
        'Description.props',
        'build.gradle',
        'LICENSE',
        'NOTICE',
        'README.mkdn',
        'todo.txt'])
    }
}

// Minor version bump; updates props file, commits, tags, and pushes
task bumpMinor {
    doLast {
        def newVersion = bumpVersion(version, 1)
        ant.input(message: "Bump version from " + version + " to " + newVersion + "?", validargs: 'y,n', addproperty: 'doVersionBump')
        if(ant.doVersionBump == 'n') {
            throw new GradleException("User stopped release at version bump step")
        }
        ant.replace(file: "Description.props", token: version, value: newVersion)
        version = newVersion
        gitAddAndCommit("bump version in Description.props")
        gitTag(version)
        gitPush()
    }
}

// HELPER METHODS

def bumpVersion(version, index) {
    def parts = version.split("[.]")
    parts[index] = Integer.toString(Integer.parseInt(parts[index]) + 1)
    for(int i = index+1; i < parts.length; i++) {
        parts[i] = "0"
    }
    return parts.join(".")
}

def getVersionFromDescriptionProps() {
	def descriptionProps = new Properties()
	file("Description.props").withInputStream { descriptionProps.load(it) }
	return descriptionProps.get("Version")
}

def gitAddAndCommit(message) {
    exec {
        commandLine 'git', 'add', '.'
    }
    exec {
        commandLine 'git', 'commit', '-m', 'message'
    }
}

def gitPush(tagName) {
    exec {
        commandLine 'git', 'push'
    }
    exec {
        commandLine 'git', 'push', '--tags'
    }
}

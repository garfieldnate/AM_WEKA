Current: SparseLattice
	- fix count, which is incorrect currently because we are not considering grandparents, etc.
		- count needs to consider all ancestors, probably meaning we need to update it dynamically during addIntent.
		- perhaps we need child and parent nodes; updated count means updating all children.
	- then move Supracontexts into the concept nodes and track heterogeneity;
		- use this to eliminate extra work, but somehow keep the count correct.
		- currently the Soybean set adds up to around 60 items and then is basically frozen. 
Next: Write UnclassifiedSupra tests and rewrite ClassifiedSupra tests 
	- so that no extra main code is required
	- maybe write a help for creating them from sub sets?
	- don't forget supra-combining tests
	- Then do CombiningLattice tests as well
Later TODO:
- replace bit counter in iterators to use Long#bitCount and Integer#bitCount
- change LatticeNode to LinkedNode decorator for Supras; then we can use supra in SparseLattice as well.
- SparseLattice using AddIntent algorithm
- distributed lattice should die if labeler says not to split
- lattice viewer (show supras in a tree)
- make a "finalized" subcontext class that is immutable and which does not override Object's equals method.
- toString for Labeler classes would be nice
- try designing a "sparse lattice" representation
	- inserted subs trickle down from dummy or real 000 into all children
	- when one supra is declared heterogeneous, loop through all other unique supras looking for children and declare them hetero; these never get trickled through again.
	- at the end, iteratively compute common children
	- then assign counts by binary distance between ancestors and children.
- label splitting should use the strategy pattern.
- change "outcome" to "class" everywhere
- shield out weka classes!
- add a "subFromString" method in the test utils class?
- test specifically the case where there is a tie for class outcome
- clean up tests; give them better names, etc. Use Hamcrest matches to make it all more legible.
- add high-level algorithm explanations for the lattice, etc.
	- package-info.java?

Engineering Tasks
- get it working with big data sets
	- soybean is too big!


Later deliverables:
- lattice viewer (show supras in a tree; GraphViz or Processing or Tikz or something)
- support other types of features as discussed in http://humanities.byu.edu/am/leipzig_margins.pdf.


Thoughts:
- is there a connection between k-d trees and AM's splitting into sub contexts?
- what would it take to make AM more of an updateable classifier, making changes to the lattice as more data is recieved?


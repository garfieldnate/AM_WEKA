Next:
- move recent new classification tests into LatticeTest so that all implementations can be checked.

Later TODO:
- test specifically the case where there is a tie for class outcome
- refactor supracontext a little so that it does more of its own work
	- the copy(ish) constructor doesn't check for heterogeneity; it shouldn't for the distributed implementation, but it should for the BasicLattice implementation.
- test the SupracontextCombiner class.
- add high-level algorithm explanations for the lattice, etc.
	- package-info.java?
- test complete classification with ignored unknowns
- use BitSets for unlimited-size labels
	- use will probably require changing Lattice to a Map instead of an array
	- or perhaps give multiple implementations: short, int, long, bitset
	- change intLabel() to bits()
- parallelize creation and combination of hetero lattices
- make splitting smarter so that the lattice array can't get too big
	- if we want each lattice to be cardinality 4, then divide by 4 and that's the number of Hetero's to make.

Engineering Tasks
- profile with big data sets

Thoughts:
- is there a connection between k-d trees and AM's splitting into sub contexts?
- what would it take to make AM more of an updateable classifier, making changes to the lattice as more data is recieved?


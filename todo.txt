Next: - speed things up!
	- fast set intersection (Bloom filter?)
	- make a "finalized" subcontext class that is immutable and which does not override Object's equals method.
	- how did they do it?
	
Write PartialSupra tests and rewrite ClassifiedSupra tests 
	- so that no extra main code is required
	- maybe write a help for creating them from sub sets?
	- don't forget supra-combining tests
Later TODO:
- distributed lattice should die if labeler says not to split
- toString for Labeler classes would be nice
- add a "subFromString" method in the test utils class
- try designing a "sparse lattice" representation
	- inserted subs trickle down from dummy or real 000 into all children
	- when one supra is declared heterogeneous, loop through all other unique supras looking for children and declare them hetero; these never get trickled through again.
	- at the end, iteratively(?) compute common children
	- then assign counts by binary distance between ancestors and children.
		-needs:
		- iterator over all non-parents;
		- common child operator
- look at the transitive closure structure, as well
	- consider treeset for labels if needed; each level is a feature, left and right are 0 and 1
- figure out what was meant in the AM: An Update paper by the awesome optimization
- 
- change "outcome" to "class" everywhere
- parallelize combination of hetero lattices
- shield out weka classes!
- test specifically the case where there is a tie for class outcome
- clean up tests; give them better names, etc. Use Hamcrest matches to make it all more legible.
- add high-level algorithm explanations for the lattice, etc.
	- package-info.java?

Engineering Tasks
- get it working with big data sets
	- soybean is too big!

Later deliverables:
- lattice viewer (show supras in a tree; dot or processing or Tikz or something)
- support other types of features as discussed in http://humanities.byu.edu/am/leipzig_margins.pdf.


Thoughts:
- is there a connection between k-d trees and AM's splitting into sub contexts?
- what would it take to make AM more of an updateable classifier, making changes to the lattice as more data is recieved?

